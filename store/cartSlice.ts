import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the CartItem type
export type CartItem = {
  id: string;
  name: string;
  price: number;
  imageUrl: string;
  quantity: number;
  category: string;
};

// Initial state type
interface CartState {
  items: CartItem[];
}

// Create the cart slice
const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
  } as CartState,
  reducers: {
    // Action to add an item to the cart
    addItem(state, action: PayloadAction<CartItem>) {
      const existingItem = state.items.find(item => item.id === action.payload.id);

      if (existingItem) {
        // If the item exists, increase the quantity
        existingItem.quantity += 1;
      } else {
        // If the item doesn't exist, add it with quantity 1
        state.items.push({ ...action.payload, quantity: 1 });
      }

      // Sync the cart to localStorage after modification
      if (typeof window !== 'undefined') {
        localStorage.setItem('cart', JSON.stringify(state.items));
      }
    },

    // Action to remove an item from the cart
    removeItem: (state, action: PayloadAction<{ id: string }>) => {
      const existingItem = state.items.find(item => item.id === action.payload.id);

      if (existingItem) {
        if (existingItem.quantity > 1) {
          // If quantity is greater than 1, decrease it by 1
          existingItem.quantity -= 1;
        } else {
          // If quantity is 1, remove the item from the cart
          state.items = state.items.filter(item => item.id !== action.payload.id);
        }
      }

      // Sync the cart to localStorage after modification
      if (typeof window !== 'undefined') {
        localStorage.setItem('cart', JSON.stringify(state.items));
      }
    },

    // Action to clear the entire cart
    clearCart: (state) => {
      state.items = [];
      // Sync the cart to localStorage after clearing
      if (typeof window !== 'undefined') {
        localStorage.setItem('cart', JSON.stringify(state.items));
      }
    },

    // Action to update the quantity of an item
    updateQuantity(state, action: PayloadAction<{ id: string; quantity: number }>) {
      const item = state.items.find(item => item.id === action.payload.id);
      if (item) {
        // Update the quantity of the item
        item.quantity = action.payload.quantity;
      }

      // Sync the cart to localStorage after modification
      if (typeof window !== 'undefined') {
        localStorage.setItem('cart', JSON.stringify(state.items));
      }
    },

    // Action to sync the cart with fetched products from Sanity
    syncSanityProducts(state, action: PayloadAction<CartItem[]>) {
      state.items = action.payload; // Directly set the items from Sanity

      // Sync the cart to localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('cart', JSON.stringify(state.items));
      }
    },
    

    // Action to load cart from localStorage 
    loadCartFromLocalStorage(state) {
      if (typeof window !== 'undefined') {
        const cartData = localStorage.getItem('cart');
        if (cartData) {
          state.items = JSON.parse(cartData);
        }
      }
    },


  },
});

// Export the actions generated by createSlice
export const {
  addItem,
  removeItem,
  updateQuantity,
  syncSanityProducts,
  loadCartFromLocalStorage,
  clearCart,
} = cartSlice.actions;

// Export the reducer to be used in the store
export default cartSlice.reducer;
