import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the CartItem type
export type CartItem = {
  id: string; // Assuming `id` comes as a string from Sanity
  name: string;
  price: number;
  imageUrl: string;
  quantity: number;
  category:string;
};

// Initial state type
interface CartState {
  items: CartItem[];
}

// Initial state definition
const initialState: CartState = {
  items: JSON.parse(localStorage.getItem('cart') || '[]'), // Load cart from localStorage or initialize as empty
};

// Create the cart slice
const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // Action to add an item to the cart
    addItem(state, action: PayloadAction<CartItem>) {
      const existingItem = state.items.find(item => item.id === action.payload.id);

      if (existingItem) {
        // If the item exists, increase the quantity
        existingItem.quantity += 1;
      } else {
        // If the item doesn't exist, add it with quantity 1
        state.items.push({ ...action.payload, quantity: 1 });
      }

      // Sync the cart to localStorage
      localStorage.setItem('cart', JSON.stringify(state.items));
    },

    // Action to remove an item from the cart
    removeItem(state, action: PayloadAction<{ id: string }>) {
      // Filter out the item to be removed
      state.items = state.items.filter(item => item.id !== action.payload.id);
      
      // Sync the cart to localStorage
      localStorage.setItem('cart', JSON.stringify(state.items));
    },

    // Action to update the quantity of an item
    updateQuantity(state, action: PayloadAction<{ id: string; quantity: number }>) {
      const item = state.items.find(item => item.id === action.payload.id);
      if (item) {
        // Update the quantity of the item
        item.quantity = action.payload.quantity;
      }

      // Sync the cart to localStorage
      localStorage.setItem('cart', JSON.stringify(state.items));
    },

    // Action to sync the cart with fetched products from Sanity
    syncSanityProducts(state, action: PayloadAction<CartItem[]>) {
      state.items = action.payload; // Directly set the items from Sanity
      localStorage.setItem('cart', JSON.stringify(state.items));
    },
  },
});

// Export the actions generated by createSlice
export const { addItem, removeItem, updateQuantity, syncSanityProducts } = cartSlice.actions;

// Export the reducer to be used in the store
export default cartSlice.reducer;
